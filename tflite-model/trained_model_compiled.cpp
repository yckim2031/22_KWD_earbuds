/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 06.10.2020 17:58:01

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 3392;
uint8_t* tensor_arena = NULL;
static uint8_t* current_location;
static uint8_t* tensor_boundary;
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.041514094918966293, } };
const TfArray<1, int> quant0_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 10, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[30] = { -44, 83, 9, 68, 127, -48, 50, 110, 34, -13, 71, 34, 29, 67, -43, 98, 79, 45, 75, 8, -25, 2, 49, 88, 16, 53, 46, 22, 55, 62, };
const TfArray<1, int> tensor_dimension2 = { 1, { 30 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00050603854469954967, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[10] = { 13, -23, -13, 9, -12, 39, 20, 7, 127, 93, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00029488265863619745, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { 15, -7, -2, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00035015193861909211, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[3*10] = { 
  -33, -105, -107, 88, 24, -35, 49, 43, -113, -10, 
  78, -10, 98, -75, 42, -8, -2, 42, 105, 27, 
  -127, 5, 6, 57, 93, 56, -39, -28, 11, -85, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0066052572801709175, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 30 } };
const TfArray<30, float> quant6_scale = { 30, { 8.2510487118270248e-05, 8.1674661487340927e-05, 7.661319978069514e-05, 7.6137781434226781e-05, 6.2984821852296591e-05, 9.9488781415857375e-05, 0.00010098304483108222, 7.0190799306146801e-05, 8.2910395576618612e-05, 7.470621494576335e-05, 7.6470249041449279e-05, 6.3592779042664915e-05, 6.5474610892124474e-05, 7.1524991653859615e-05, 6.682296225335449e-05, 7.1409500378649682e-05, 7.8349992691073567e-05, 6.7655033490154892e-05, 8.273326966445893e-05, 8.1138532550539821e-05, 7.5168623880017549e-05, 7.4438750743865967e-05, 6.4380168623756617e-05, 7.3921146395150572e-05, 9.8629170679487288e-05, 6.4184816437773407e-05, 9.7185111371800303e-05, 6.4186293457169086e-05, 8.2260812632739544e-05, 7.380826718872413e-05, } };
const TfArray<30, int> quant6_zero = { 30, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[30*1*7*13] = { 
  /* [0][0][][] */ -44,-39,45,127,-69,-31,11,-39,-62,58,56,-45,28, 15,-20,90,11,5,13,26,-53,-25,54,64,-27,12, 0,19,85,70,-35,-15,-20,-85,67,-68,4,-17,-22, -33,31,65,30,-78,29,-59,-54,4,-9,-22,84,-39, 52,59,97,-8,-47,52,-39,23,75,-40,32,17,19, 41,94,14,62,6,-29,29,10,37,-47,-56,-3,-30, 66,91,96,-36,26,33,27,-19,-32,-22,-22,-50,11, 
  /* [1][0][][] */ 13,-3,43,7,35,71,55,-6,-5,-30,-24,7,29, 66,-127,4,16,-53,65,-28,68,23,-15,39,-41,9, -52,-74,3,-70,-62,-79,-26,3,79,53,39,-28,60, -92,70,-10,84,30,8,-10,-51,-73,-38,46,-6,-64, 49,-39,-64,73,-14,-27,123,-51,59,59,-74,-84,1, 39,-97,-83,-42,-70,39,-33,-8,2,-13,-58,62,-3, -116,-32,45,62,-47,44,-66,-68,-15,44,-59,37,41, 
  /* [2][0][][] */ -68,45,31,46,-78,-28,-33,23,-45,28,-27,14,27, -41,-17,114,-83,-8,-25,19,-25,-36,1,-59,23,-13, -51,-55,17,47,15,69,93,44,4,2,60,47,17, 69,43,-18,26,-25,-60,48,61,-65,-5,15,40,-8, -57,36,5,113,127,88,31,1,-3,22,-37,-22,15, 82,-15,61,27,-30,60,28,18,21,17,31,53,60, -31,112,114,-27,108,-5,-57,-70,-24,-14,-16,-5,-36, 
  /* [3][0][][] */ -63,53,19,-8,-108,-35,71,79,1,-22,-32,-50,81, 122,-24,12,-52,57,-41,79,22,55,-56,69,38,-59, 54,-4,-40,-53,-53,-78,38,89,-66,-8,-63,71,38, -61,-31,-23,38,-4,-49,43,43,53,10,51,-38,54, -33,127,-56,35,86,24,-79,-42,-1,50,30,13,-61, 62,32,-65,-85,-80,32,57,26,55,-39,41,9,-33, 44,-20,15,26,-28,-62,-36,21,-51,-18,52,34,3, 
  /* [4][0][][] */ 13,-64,66,46,-92,89,45,-41,7,-39,-52,-85,2, -52,-60,-66,14,-2,99,2,27,-32,18,74,61,3, -80,16,-88,-55,11,55,53,11,-93,54,36,-66,-102, 77,-64,24,-55,-113,5,122,-94,61,-12,-34,-11,97, -41,-7,17,-2,84,45,-33,-127,-85,83,-29,34,-37, -31,38,-38,-18,-26,-14,-62,-55,94,34,6,-85,-43, 82,-68,-65,-2,-5,13,113,-91,24,-118,0,-16,-69, 
  /* [5][0][][] */ 10,30,-17,-70,65,0,-45,11,52,-15,43,-13,25, 55,-78,48,-84,25,6,-30,55,-54,50,47,22,28, 9,-6,63,-42,29,1,-28,24,-3,1,-2,63,-4, 30,6,-35,25,-14,23,-42,-13,54,-7,4,-40,0, 35,127,-13,65,-15,-122,43,0,5,33,8,29,25, 32,107,-59,67,-74,-91,45,-42,-25,79,-90,19,21, 29,107,-72,74,-22,-47,97,-36,55,28,-49,36,-29, 
  /* [6][0][][] */ -15,68,-60,-46,39,-42,22,32,-68,-41,24,37,3, 20,17,-39,-8,33,-26,36,40,-39,-8,19,31,-2, 28,67,-55,-45,-1,4,20,13,-14,-6,-49,24,45, 43,68,-39,-5,-19,-10,45,10,-40,7,9,-26,44, 89,127,6,41,-11,-20,51,25,-24,75,69,-32,35, 86,109,21,24,-41,-49,-18,-43,-4,39,-30,-18,1, -1,58,19,-50,-35,-16,47,-9,-21,64,-16,24,46, 
  /* [7][0][][] */ -68,-16,1,68,37,62,-87,7,-40,-16,-24,-12,-2, 43,-89,75,-28,-20,20,82,-91,36,-34,-94,-68,33, 51,-110,30,62,63,49,11,-53,82,-3,79,-26,97, 23,-43,-31,56,57,34,-29,-34,127,-4,-49,32,-90, 69,-114,84,-25,-96,-39,-86,-52,-71,-62,-48,79,-70, -70,29,8,-54,-37,-1,-27,58,-48,19,94,-32,29, 45,63,13,49,-89,-30,-30,-13,100,-43,-65,112,-12, 
  /* [8][0][][] */ 48,53,-92,52,-51,-79,-31,-62,-37,20,-30,0,58, 16,53,-56,-1,-85,-41,31,-28,9,8,5,-40,-24, 13,33,-96,-14,4,-87,8,46,-35,-2,-32,-50,43, -50,39,-40,73,58,-127,81,-72,18,66,-57,41,-37, 84,-27,-17,-63,64,-41,36,-44,38,67,-32,40,-2, 95,-60,-13,5,76,30,-57,25,50,-2,80,65,4, -7,-24,-1,-18,-25,93,-50,-4,52,41,-6,22,-5, 
  /* [9][0][][] */ 22,29,67,46,-52,-73,-51,-37,0,-16,-21,7,34, -6,-49,79,102,63,-10,-118,-66,-19,-48,79,-7,-70, 39,-29,73,38,-95,19,-65,-86,81,-52,74,3,-13, 23,-14,-27,-44,-57,46,13,53,91,-44,-31,-44,29, 47,76,-39,-34,-69,127,-28,-44,-58,-9,-27,18,6, 85,-32,12,23,35,15,-5,-32,42,-40,87,-58,-91, 27,83,51,-42,-59,40,9,0,-44,-99,39,8,52, 
  /* [10][0][][] */ 15,11,-41,-45,41,-63,52,-10,6,33,-24,-3,-30, 123,48,-30,-64,-52,24,-65,90,11,6,-54,-40,25, 59,109,37,-125,45,25,-53,87,-12,73,62,-1,70, 59,28,-46,-108,-29,60,-18,18,-20,-33,0,-25,62, 92,84,23,19,-74,-44,-43,86,43,6,0,-46,42, 66,112,-46,-24,9,36,-70,127,-3,19,-38,-85,85, 103,39,0,41,24,-64,-47,71,-83,-55,-52,30,60, 
  /* [11][0][][] */ 89,60,-9,109,6,-124,114,-38,-11,-26,58,-79,106, -19,-13,-52,104,28,3,64,-82,-127,-43,76,79,55, -75,66,-108,-80,20,-45,-8,70,-13,-4,110,-59,52, -92,-11,-80,-9,-39,29,94,43,11,13,76,7,-65, -53,69,-47,-99,70,-90,106,-71,-4,-32,-71,79,8, -85,-116,76,24,-32,62,4,53,-63,-16,-5,68,-36, 123,-47,59,-30,46,5,-2,41,68,-87,50,-25,96, 
  /* [12][0][][] */ 89,-43,-54,-9,46,4,127,26,-59,64,-79,-23,-103, 100,3,-46,-112,57,66,-40,70,-116,55,-29,-55,-5, 118,22,-44,-26,-20,-19,49,94,-68,-72,60,33,-25, 125,-48,-86,-12,-79,80,103,-70,-22,8,-26,50,-37, 9,20,-51,10,-36,37,50,3,50,-85,0,45,-56, 83,-79,20,2,38,86,106,24,-2,36,-51,-36,77, 76,-78,-7,69,-88,-27,49,-89,6,7,-57,10,-75, 
  /* [13][0][][] */ 7,-83,63,21,49,-17,76,-58,50,-16,6,1,41, -84,-55,-23,-95,8,4,36,-54,-5,35,77,106,-45, -85,-7,99,-54,25,-38,-10,86,-80,63,6,32,66, -75,-29,-35,-31,-20,19,-40,118,-33,3,34,-73,15, -25,71,-31,63,33,36,-20,-39,-69,-18,-11,-85,75, 61,124,-73,-5,-41,-127,-23,-74,41,-54,-57,-1,-16, -99,70,-70,125,-13,-96,24,-61,-37,-22,4,-63,-64, 
  /* [14][0][][] */ -99,7,-39,45,54,-18,-22,60,-59,-76,2,-45,-50, 1,80,32,23,118,-28,-5,49,-32,27,-46,-13,-90, -16,-53,95,-89,25,73,37,48,35,-33,23,48,-17, 39,-107,-9,-37,2,55,-38,-88,20,48,23,5,5, -18,27,-54,-53,-2,-14,43,56,31,68,-16,14,-76, 114,25,-12,-78,10,-98,-60,59,25,40,59,-26,53, 67,127,-64,-69,24,28,-82,-15,76,41,2,63,34, 
  /* [15][0][][] */ -74,23,13,63,-35,-9,126,-63,-67,60,-62,45,43, -34,-29,-53,-28,1,29,45,-127,-8,56,27,-13,69, 51,26,88,30,39,35,-8,9,67,-50,-23,14,-41, 1,20,72,-3,-28,-11,20,-24,-17,30,-35,64,82, -77,-79,119,41,-45,-10,16,-44,-36,-89,-37,-6,-69, -71,-8,11,40,65,107,-65,35,18,15,10,54,-9, 87,-103,63,16,82,31,5,-36,-25,42,-29,61,-19, 
  /* [16][0][][] */ -24,-3,19,49,-37,-28,14,-58,-54,64,34,38,-25, 57,-56,-82,74,-54,20,3,35,-37,42,-18,38,37, 74,29,-31,-27,4,81,58,43,77,-22,-14,-48,0, 42,-5,31,70,-89,-3,-70,88,50,17,-45,-71,19, 95,68,91,8,35,2,-92,38,-85,-25,34,-2,49, 112,126,-5,-118,-38,19,-127,44,62,-64,24,29,-79, 85,62,16,-39,65,26,-90,-3,-39,-70,-44,35,-107, 
  /* [17][0][][] */ -37,-96,-71,112,17,76,-24,-79,2,-51,-32,-31,-15, -35,-45,21,127,64,117,59,-2,-71,49,-7,95,80, 4,-101,-48,-72,27,60,-18,51,64,89,64,8,-24, -70,-11,24,77,-20,-24,60,-19,104,-78,13,71,-21, 49,-2,-70,6,66,99,-96,39,19,-95,54,-55,37, -39,9,45,113,-33,-9,62,-21,114,62,-47,42,-29, -12,-24,16,-41,100,124,-68,-83,-37,-105,84,41,27, 
  /* [18][0][][] */ -33,3,116,33,1,56,-19,57,38,-65,62,0,-47, 24,-102,-29,-64,-37,6,-47,26,-38,-14,13,34,-40, 80,-61,18,-17,66,42,21,-96,-65,-34,3,-99,21, 56,39,-64,-48,35,-49,-5,10,-63,-5,-72,-47,25, 93,11,46,-14,-104,15,3,-19,-12,-56,-42,6,-15, 119,61,46,6,-75,32,-92,25,12,61,-29,27,27, 127,90,10,31,-92,-13,-85,33,-35,-75,-40,40,-1, 
  /* [19][0][][] */ -37,41,-3,-47,33,27,51,-14,-9,-9,27,59,29, 59,51,27,-14,-14,54,50,-16,-41,43,82,70,-21, 25,-57,57,1,15,-31,-16,4,54,97,-21,-27,-44, 71,17,36,-38,29,31,64,-30,-35,12,11,19,29, -10,16,21,41,-57,-26,107,-13,-36,58,-58,-1,34, -80,127,-13,71,-4,-85,-5,7,-73,-34,-44,12,72, 24,78,-38,7,50,-42,-14,-20,33,72,-4,-64,-18, 
  /* [20][0][][] */ 20,-6,3,-46,-34,29,53,39,49,10,68,42,-33, 47,127,-49,-76,-41,26,-89,-20,-75,22,13,69,-35, 107,75,15,-14,-11,59,-28,102,-42,16,12,2,10, 125,53,1,-57,-49,63,-83,89,-42,-3,38,21,-62, 100,126,-62,-90,19,36,-13,72,-69,-6,18,-40,40, 105,-10,-30,-33,-31,22,72,43,-38,-18,58,23,-34, 21,-13,-30,22,59,27,-58,1,46,-28,-31,21,-31, 
  /* [21][0][][] */ 46,55,23,85,77,64,41,86,-55,-82,-45,51,35, 100,-29,15,-66,-23,-47,71,117,-56,-97,-55,52,49, 19,23,-48,-127,15,-18,-85,-16,-57,81,-49,54,4, 80,73,41,-52,58,-51,13,-78,-32,-69,-32,-74,31, -20,-15,-64,61,23,102,-72,-59,-10,18,-87,-51,64, 47,37,-20,37,27,-28,-9,-40,-15,21,-46,-47,-48, -4,-18,0,19,15,66,34,-63,41,75,1,25,33, 
  /* [22][0][][] */ -121,8,-34,-34,-15,2,7,-62,-31,53,-81,-13,-88, -90,-21,-39,63,-102,-47,21,66,-43,-100,-83,-45,-68, 61,61,-36,-24,13,-95,-48,-30,29,-69,41,62,0, 53,-58,46,42,29,-23,113,57,-71,127,-75,-67,5, -23,35,-62,-5,63,-27,-90,-36,30,-94,96,66,-32, -65,-69,93,-46,-54,-47,-49,-28,-29,27,-36,58,11, -39,-114,71,-26,-88,103,-48,-46,43,-105,65,101,-60, 
  /* [23][0][][] */ -34,-18,11,-43,4,5,-41,52,39,-2,-6,-32,48, -127,78,-55,51,22,33,-29,47,50,11,41,15,78, -43,10,-4,-84,43,-38,41,-63,-26,-20,-48,21,63, -82,-76,52,-72,58,-66,-79,14,-75,-34,84,-64,47, -16,0,-43,-66,70,76,80,90,-51,-26,36,12,-16, 12,-42,38,14,-11,9,-5,-62,98,-14,35,61,-44, -47,-38,-69,-26,-8,35,71,27,-24,8,13,-14,80, 
  /* [24][0][][] */ 75,49,21,-69,-10,14,-4,2,-8,41,-20,-4,7, 78,-16,42,-32,-58,30,-11,-19,43,0,-62,1,-50, 65,-5,21,-1,13,-58,53,-43,6,61,-19,-28,6, 90,63,9,78,-42,-85,-18,-24,-36,44,-25,-6,-11, 127,88,17,97,-50,-81,22,-50,3,60,34,8,22, 58,37,-20,102,-69,-77,-8,0,-46,11,3,17,29, -1,25,-9,-1,-2,-97,-43,-15,-14,7,9,23,-29, 
  /* [25][0][][] */ -87,-39,-48,49,19,-74,-55,74,-50,96,-8,75,92, 12,10,-96,-5,68,40,-6,114,-98,-20,-17,8,-11, 25,-29,38,-65,-45,71,-12,9,-32,46,81,0,62, -49,10,-83,-21,65,39,-80,-69,-23,-81,-44,11,-37, 63,60,10,-56,114,-27,-75,127,38,15,-39,5,89, 47,28,-99,19,11,-35,24,37,90,71,70,-36,-58, 84,-4,-35,44,13,-36,-39,-46,-35,7,-105,-11,-9, 
  /* [26][0][][] */ 90,22,-29,-40,2,12,-88,-53,-31,-54,6,32,-29, -28,127,92,1,-26,11,64,-3,-24,-31,30,52,-60, 95,78,-25,20,65,54,38,56,33,6,17,-57,-21, -3,-57,-29,-27,-23,-7,-9,-63,-39,19,36,27,18, 27,53,-16,-81,-57,14,63,-5,-22,34,-25,-50,-55, 72,31,51,25,56,54,19,-18,-1,15,-18,23,-50, 15,95,18,-42,-69,-11,-48,-19,-27,47,7,49,-46, 
  /* [27][0][][] */ 119,-70,-97,-69,-86,-34,32,-13,-92,-34,-12,-36,-11, -77,-64,-86,-125,-91,33,49,98,-11,9,-76,20,-62, 41,75,-89,96,66,127,-14,-63,-22,92,14,-27,-6, -92,78,51,-97,-42,-22,-18,-79,47,81,36,3,10, 91,100,-45,-96,57,103,-36,-66,-114,-71,-35,-50,-59, 34,-116,55,43,59,64,103,-18,32,66,53,47,49, -79,47,92,58,-55,-53,-39,22,9,66,28,61,61, 
  /* [28][0][][] */ 36,57,61,44,-50,5,-127,-81,1,-50,17,-12,-15, 46,-16,81,89,36,96,-50,2,86,29,85,-3,1, 6,-81,52,125,47,54,38,-6,1,-45,19,-10,17, -14,59,60,95,18,20,-56,38,-25,17,62,14,-59, -50,-44,50,-48,16,17,13,0,-7,4,12,76,-44, -41,40,-47,-78,-31,24,-46,33,1,-56,37,-51,46, 15,1,6,-44,80,-23,-46,-70,-28,-69,23,-55,34, 
  /* [29][0][][] */ 59,72,-82,-3,-77,116,48,103,-14,53,2,-67,-116, 6,9,-76,-51,-17,127,-90,25,82,-16,-5,54,22, -47,18,1,-44,47,106,47,58,-41,-37,-118,82,53, -29,8,2,51,23,-33,10,27,-25,5,-81,57,-10, -64,43,-14,-12,12,44,11,21,25,-5,-48,71,-81, 61,47,27,-71,52,-35,19,67,-42,-4,60,37,-46, -67,82,-9,57,26,90,-29,74,64,37,-78,61,-30, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 30,1,7,13 } };
const TfArray<30, float> quant7_scale = { 30, { 0.0019875294528901577, 0.0019673958886414766, 0.0018454744713380933, 0.001834022463299334, 0.0015171911800280213, 0.0023965060245245695, 0.0024325002450495958, 0.0016907702665776014, 0.0019971625879406929, 0.0017995384987443686, 0.0018420309061184525, 0.0015318358782678843, 0.001577165792696178, 0.0017229086952283978, 0.0016096452018246055, 0.0017201266018673778, 0.0018873106455430388, 0.001629688311368227, 0.0019928959663957357, 0.0019544814713299274, 0.0018106771167367697, 0.0017930958420038223, 0.001550802611745894, 0.0017806276446208358, 0.0023757996968924999, 0.0015460969880223274, 0.0023410147987306118, 0.0015461326111108065, 0.0019815152045339346, 0.0017779085319489241, } };
const TfArray<30, int> quant7_zero = { 30, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 10 } };
const TfArray<10, float> quant8_scale = { 10, { 6.2017126765567809e-05, 5.4328716942109168e-05, 5.4624644690193236e-05, 4.6191333240130916e-05, 9.3154805654194206e-05, 7.6450887718237936e-05, 6.3137966208159924e-05, 5.4929725592955947e-05, 6.2074039306025952e-05, 5.2862615120830014e-05, } };
const TfArray<10, int> quant8_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[10*1*7*30] = { 
  /* [0][0][][] */ -34,-11,7,4,46,-54,-35,19,-99,-76,-17,-60,32,54,-30,-16,-72,-10,-37,4,48,-44,-58,-39,-69,-59,57,-36,-66,-15, -33,-23,53,-8,72,6,45,19,52,25,-25,77,-82,80,-32,38,46,36,-81,-58,-52,11,95,-9,-74,-30,-9,9,62,-24, 48,-29,-72,-60,-61,-127,-84,71,-34,61,9,-23,32,-76,-31,48,-23,19,-55,-23,-62,-45,38,58,-122,70,-14,-18,52,40, 55,29,48,-20,-22,-67,-10,-41,-53,-44,-40,-51,-48,12,-15,40,101,83,1,-66,-8,31,31,-81,-79,-42,31,-76,32,85, 75,4,23,-19,6,-81,-14,74,9,103,65,-76,64,24,25,27,85,31,91,-64,101,23,-56,-88,55,69,71,6,-26,41, 82,-91,7,69,-92,37,62,-15,10,-26,72,8,26,-101,14,-76,42,11,13,54,74,90,2,-25,103,7,67,-9,-34,4, -37,-56,42,-13,43,-20,-54,10,-78,13,-62,-69,31,1,-45,60,-49,60,-43,-44,45,80,-45,31,-62,-43,-19,39,36,39, 
  /* [1][0][][] */ -66,9,-56,2,6,-16,55,-46,-53,-70,-4,-74,-25,-50,-79,-90,-53,45,45,-87,7,65,-13,49,-2,73,-50,43,-12,30, -64,2,23,46,-2,48,39,-43,-43,5,-116,3,25,17,77,63,-10,61,19,-1,45,-44,1,76,48,87,-40,4,3,-47, 102,4,-57,-51,-54,101,109,-60,-20,21,-47,59,-84,23,90,45,29,-105,14,82,45,-50,57,13,21,53,19,-80,-67,-78, -11,36,-36,50,-72,119,51,-74,72,-25,48,0,-79,64,-3,-1,52,-81,-100,-1,61,-32,48,68,25,69,-31,-103,-76,68, -43,-87,12,33,23,124,52,-58,106,28,80,41,68,71,-2,46,-31,-58,52,68,-25,-37,-84,-36,88,86,71,-69,-106,-79, 75,-13,-43,9,-17,-40,63,66,26,15,67,-83,76,-109,-11,-5,109,-44,23,-101,94,12,17,-78,11,2,33,-57,-3,12, -33,-8,-106,-104,71,-5,-127,-49,-65,66,-94,51,-4,-19,56,-31,32,-37,-29,1,27,-18,-86,15,70,-47,3,-89,123,-53, 
  /* [2][0][][] */ -58,52,10,-67,47,-20,-2,-31,52,63,-75,-44,9,-95,12,-9,-26,101,-85,-38,61,-56,9,45,53,51,-95,-68,-9,62, 75,-113,-4,-31,-69,100,110,90,-20,-18,92,53,2,76,73,-74,54,-77,30,-5,-14,-25,-9,-47,114,20,-21,-115,-1,-49, -35,-127,1,44,9,126,46,-111,27,71,109,-65,63,-74,10,-5,100,-28,38,-12,96,71,-45,33,31,-4,-38,17,-14,99, 34,-14,-69,-101,55,-61,66,-66,85,-103,7,53,97,-33,62,36,-57,-9,-85,74,65,-66,15,-69,101,-85,1,-17,24,27, 8,17,-21,-47,-23,-14,-59,56,38,34,-61,6,-2,-61,72,2,7,77,64,27,-100,-82,14,47,60,-103,-80,-101,48,-82, 13,57,0,-40,-28,-57,-31,52,-11,-9,-10,12,32,48,-60,49,-28,-68,-55,60,74,-44,-42,-1,-59,4,-78,45,-72,-26, 49,68,53,40,-15,66,-74,59,-93,-54,8,-2,73,-9,-86,-3,-68,68,64,13,12,-21,55,-56,12,-21,-118,-11,-40,56, 
  /* [3][0][][] */ -56,28,-46,-60,23,87,62,105,126,-43,77,59,38,-51,-3,126,28,46,49,-22,-47,105,86,127,37,-71,-71,118,50,57, 20,35,-30,37,48,-52,81,50,72,-82,-98,20,-49,103,73,-84,-37,24,-7,101,-29,-33,-54,5,45,34,27,-61,38,12, -10,-24,55,24,-22,118,-84,96,-8,26,-56,98,-7,24,44,120,20,-52,-77,34,51,-12,51,-56,53,100,17,69,-90,14, -80,102,13,56,123,-31,-42,101,-8,-67,-60,18,-33,118,63,25,116,53,79,38,-30,59,101,12,35,4,101,-39,-93,70, 103,115,-6,108,-27,-57,-34,-78,-27,-60,-1,-87,68,118,49,70,93,-81,-54,85,-11,16,120,101,13,70,51,-57,46,77, -96,-65,120,117,15,32,59,46,70,75,-69,-20,-41,30,112,68,-75,55,123,46,-25,-45,-67,67,57,-36,0,98,-32,14, 38,124,53,-45,81,-3,11,57,46,-30,90,45,-65,-77,-68,104,-34,13,105,-41,112,120,45,-53,-12,6,60,-7,-41,-91, 
  /* [4][0][][] */ -16,-25,-34,-27,-86,115,21,-47,9,19,39,-17,-79,53,8,-15,8,-70,41,27,40,27,13,83,97,-9,-3,-54,-9,14, -12,-52,-24,-21,-69,52,14,-33,67,-5,12,50,-42,58,30,-34,-47,-41,-62,35,33,21,31,37,20,-7,-75,-24,-9,-24, 70,94,-56,-19,13,127,47,61,-16,16,41,16,40,-25,13,58,61,-23,42,11,3,2,69,1,54,45,4,-5,-11,9, 34,-23,-69,-77,-9,-43,-68,42,-61,40,-45,-18,-71,0,11,36,8,-47,23,2,30,-81,-18,-13,14,-68,41,-10,79,18, -67,7,-48,13,7,-17,11,-25,-21,27,-37,-12,-30,-33,19,-2,-17,28,16,-68,-46,-22,-51,1,2,37,-26,18,-3,-33, -63,-48,-6,-42,-30,31,26,-11,23,-13,-41,11,-50,-43,-10,-62,-45,7,30,0,-26,-32,6,11,-44,45,-66,21,-16,25, 20,-1,-34,21,-37,-7,34,-41,17,-48,-7,-30,38,-24,-41,6,-47,-15,11,-53,16,19,9,37,31,9,-53,-43,-65,23, 
  /* [5][0][][] */ 4,25,-47,13,-91,53,44,-60,108,-84,-39,94,-73,50,-43,40,-53,-53,-59,54,43,13,-19,6,16,-6,-39,-69,-105,-43, 80,96,57,-41,7,127,60,68,96,-15,23,42,54,78,10,84,20,16,34,49,-59,18,-1,60,100,58,-27,-30,-58,-31, 108,34,-51,-79,-11,21,-49,7,25,112,16,-8,52,5,-97,60,65,25,13,-63,43,-8,10,-77,25,-87,-37,-21,43,9, -69,12,-67,-35,-15,-46,12,21,-73,49,34,-26,-58,-38,18,-41,-66,-45,-4,-45,-18,-36,18,72,-80,23,-72,-61,48,0, -45,-42,-73,-59,-40,41,-8,-43,-36,-93,92,32,-81,-26,54,-35,-59,20,2,-64,20,6,-15,83,-34,3,25,10,19,-39, -61,26,-23,24,-51,-14,-13,-72,-43,-17,45,-41,-64,25,-37,-53,16,26,-47,23,-16,10,2,-34,37,75,-67,31,-48,8, 68,0,-7,-68,13,74,47,46,-7,-20,7,-28,23,54,-38,-33,71,31,71,63,-51,20,27,0,88,-13,25,-10,-3,3, 
  /* [6][0][][] */ 77,-3,43,102,63,-50,25,58,44,98,11,67,-61,4,18,21,71,23,38,-24,102,53,-28,65,-96,73,40,-28,109,82, -54,-25,66,109,10,-57,-7,35,53,-42,22,-30,45,18,-27,70,80,92,21,72,52,-19,-36,-10,-70,68,65,9,35,73, -40,-13,41,56,-29,-4,57,-17,-67,79,-19,18,45,41,1,2,-5,20,40,-35,20,101,97,-54,-42,-61,64,3,98,37, 35,43,99,46,61,-32,-80,-14,17,-30,-70,-51,45,-31,27,-46,62,10,-28,-41,-43,-22,32,54,-67,-68,28,1,-34,26, -45,7,-12,39,-17,-72,-3,-9,-30,-39,-1,57,-26,7,-36,-45,37,-29,65,-37,36,93,-15,35,55,-42,41,29,13,-49, 59,81,36,86,54,-48,59,-26,18,-60,31,-11,69,-14,58,-41,86,42,42,-30,-43,67,43,35,60,28,38,86,-7,-4, -49,32,-23,32,-31,58,-50,9,66,-26,84,-16,62,3,49,-5,-40,-33,36,95,73,66,48,-21,28,66,68,127,-42,2, 
  /* [7][0][][] */ -49,48,-57,-86,-31,-44,-22,-70,51,74,84,52,-20,-40,-35,-43,-24,12,-25,14,82,52,49,-102,-94,51,53,3,-44,75, 23,11,39,-18,-89,-103,-69,13,-35,49,14,-32,-83,11,-99,62,-23,-4,-26,14,27,-17,-12,26,47,38,41,13,13,2, 46,33,29,70,41,-67,-63,-10,25,-4,23,-29,-28,62,37,44,26,18,-94,-2,101,66,97,-43,-20,93,-60,97,63,4, -66,85,62,-56,72,-86,-97,-73,-67,62,-47,77,-34,-86,3,9,34,72,-28,3,70,52,1,-18,-91,-23,77,63,-81,-22, -19,52,-7,-54,33,-112,-96,37,-37,99,-50,-77,31,-42,88,79,-58,109,-97,9,51,88,33,-9,-127,-28,108,42,-11,80, 18,40,36,-51,127,-107,-3,94,46,14,48,-9,58,-47,-42,-9,-1,44,17,22,-48,1,-40,43,-13,-2,92,17,54,-17, 69,73,93,106,-46,-67,55,50,-12,84,12,8,111,-42,59,-18,-1,-33,-42,94,71,7,-95,-84,-21,67,114,70,46,5, 
  /* [8][0][][] */ -42,24,0,23,72,35,88,-86,3,-50,81,73,107,81,-35,35,-58,46,8,-4,-36,71,11,-3,94,-11,13,59,67,-30, 88,-37,-28,-6,46,-11,36,-10,-9,-35,-59,81,41,-75,-12,-29,-13,-29,3,-39,5,96,-4,-100,21,25,-31,2,13,-5, -30,-68,-33,37,-18,-17,-28,27,17,-46,-62,-25,7,-70,-56,-53,20,12,-11,11,-39,-38,25,61,-29,12,-95,-12,12,31, -18,76,-66,45,42,-15,-77,59,-40,-34,-94,-33,-33,39,-7,56,-72,41,-78,-59,-26,13,-14,72,-43,-72,17,-50,-75,33, -59,73,-31,-69,-39,-33,-16,-2,37,19,-16,-38,-10,-45,38,62,-99,-24,-23,1,4,-43,12,44,53,71,-15,29,-62,32, 1,-71,-62,-32,-28,11,-32,43,-53,-60,-33,42,5,67,-74,91,18,67,43,-61,69,4,-73,-27,49,-22,-97,-79,-37,-58, 88,-115,35,58,-8,32,127,-10,9,92,3,15,-32,17,-20,-104,59,24,85,39,96,-16,-59,38,68,71,74,19,-41,78, 
  /* [9][0][][] */ -3,-3,20,71,-79,20,69,-53,49,-14,1,23,-68,-61,-79,18,100,109,-27,64,53,-18,-63,60,-72,-10,-33,-63,44,-73, 30,-90,33,65,22,-63,33,18,-114,11,78,-42,41,23,43,7,-30,-16,-21,85,57,-29,35,-53,6,-30,32,-43,10,-55, -44,-6,-65,97,-65,-10,-33,-57,-10,-34,22,-38,46,-11,74,-109,114,-107,-78,-30,41,118,-40,12,13,48,-69,-116,65,-85, 26,-21,-9,25,-63,-97,89,-54,-24,-39,63,-27,-87,42,-81,18,70,-63,24,49,101,84,-8,81,-29,13,57,50,26,49, -83,-20,70,-76,108,-102,-34,127,-39,-82,-77,-51,-33,0,-3,35,-112,6,-102,66,23,2,49,7,22,11,24,69,-99,122, -37,-17,27,53,81,10,-41,-88,-84,-12,82,64,105,-85,-87,39,32,65,-11,-73,110,-1,78,-53,-87,64,-49,11,-79,21, -22,-35,7,71,92,2,11,123,-9,98,-27,-15,-5,50,-4,42,0,55,51,87,58,-40,-36,-22,-87,48,-67,93,-63,-18, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 10,1,7,30 } };
const TfArray<10, float> quant9_scale = { 10, { 0.0018868363695219159, 0.0016529208514839411, 0.0016619242960587144, 0.0014053455088287592, 0.0028341829311102629, 0.0023259755689650774, 0.0019209373276680708, 0.0016712062060832977, 0.0018885679310187697, 0.0016083155060186982, } };
const TfArray<10, int> quant9_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 49, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 49, 30, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 49, 1, 30, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 7, 30, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 7, 10, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 7, 1, 10, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,49,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.041514094918966293, } };
const TfArray<1, int> quant16_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,49,30 } };
const TfArray<1, float> quant17_scale = { 1, { 0.05315827950835228, } };
const TfArray<1, int> quant17_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,49,30 } };
const TfArray<1, float> quant18_scale = { 1, { 0.05315827950835228, } };
const TfArray<1, int> quant18_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,49,30 } };
const TfArray<1, float> quant19_scale = { 1, { 0.032868310809135437, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,49,1,30 } };
const TfArray<1, float> quant20_scale = { 1, { 0.032868310809135437, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,7,1,30 } };
const TfArray<1, float> quant21_scale = { 1, { 0.032868310809135437, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,7,30 } };
const TfArray<1, float> quant22_scale = { 1, { 0.032868310809135437, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,7,10 } };
const TfArray<1, float> quant23_scale = { 1, { 0.0903434157371521, } };
const TfArray<1, int> quant23_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,7,10 } };
const TfArray<1, float> quant24_scale = { 1, { 0.0903434157371521, } };
const TfArray<1, int> quant24_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,7,10 } };
const TfArray<1, float> quant25_scale = { 1, { 0.053011097013950348, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,7,1,10 } };
const TfArray<1, float> quant26_scale = { 1, { 0.053011097013950348, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,1,10 } };
const TfArray<1, float> quant27_scale = { 1, { 0.053011097013950348, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,10 } };
const TfArray<1, float> quant28_scale = { 1, { 0.053011097013950348, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,3 } };
const TfArray<1, float> quant29_scale = { 1, { 0.095186240971088409, } };
const TfArray<1, int> quant29_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,3 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,7, 1,7, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,7, 1,7, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 2730, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 2100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1472, (TfLiteIntArray*)&tensor_dimension17, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1472, (TfLiteIntArray*)&tensor_dimension19, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1472, (TfLiteIntArray*)&tensor_dimension21, 210, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 210, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension23, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension25, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension27, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension29, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  current_location = tensor_arena + kTensorArenaSize;
  tensor_boundary = tensor_arena;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
  free_fnc(tensor_arena);
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
